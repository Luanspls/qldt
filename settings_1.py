"""
Django settings for PythonWeb project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# import pytesseract

# pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# {
#  "python.analysis.exclude": ["**/node_modules", "**/__pycache__", "**/build", ".git", "myenv/**"]
# }

from pathlib import Path
import os
import sys
from django.shortcuts import redirect
from django.contrib import messages
# from email.utils import formataddr

# class SessionSecurityMiddleware:
#     def __init__(self, get_response):
#         self.get_response = get_response

#     def __call__(self, request):
#         if not request.user.is_authenticated and request.path != '/log-in/':
#             request.session.flush()  # Xóa toàn bộ session nếu người dùng không xác thực
#         response = self.get_response(request)
#         return response

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%m0skhg@3smar9puib%m28#5(psk6iop5c@f3o*)#@b*8xtyig'
# SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'ignore_chrome_devtools': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                'GET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1' in record.getMessage()
            ),
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'], 
            'level': 'DEBUG',  # INFO, WARNING, ERROR
            'propagate': True,
        },
    },
}


ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', 'dkts.lce.vn'] #


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'app',
    'django_extensions',
    'rest_framework',
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
    'django_htmx',
    'debug_toolbar',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# SESSION_ENGINE = 'django.contrib.sessions.backends.db'

ROOT_URLCONF = 'PythonWeb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates",
                 os.path.join(BASE_DIR, "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PythonWeb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR /'db.sqlite3',
    # },
    # 'default': {
    #     "ENGINE": "django.db.backends.postgresql_psycopg2",
    #     "NAME": "postgres",
    #     "USER": "adminweb",
    #     "PASSWORD": "l14789",
    #     "HOST": "127.0.0.1",
    #     "PORT": 5432,
    #     'SCHEMA': 'public'
    # }
    'default': {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "db_luannc",
        "USER": "luannc",
        "PASSWORD": "c10.112233",
        # "HOST": "localhost",
        "HOST": "db.lce.vn",
        "PORT": 54321,
        'SCHEMA': 'public',
        'CONN_MAX_AGE': 300,  # Kết nối tồn tại 5 phút
        'POOL_SIZE': 20,       # Sử dụng django-db-connections
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'app.Appuser'

AUTHENTICATION_BACKENDS = [
    'app.backends.AppuserBackend',
    'django.contrib.auth.backends.ModelBackend',  # Optional: Keep the default backend for other models
]

# AUTH_GROUP_MODEL = 'app.GroupApp'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE ='Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "app/static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

MEDIA_URL = '/media/'

# Sử dụng database-backed sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# Thời gian tồn tại của session (tuỳ chọn)
SESSION_COOKIE_AGE = 604800  # 1 tuần tính bằng giây
SESSION_SAVE_EVERY_REQUEST = True  # Lưu session sau mỗi request

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    "171.225.199.96",
    # ...
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ]
}

SITE_URL = '127.0.0.1:8000'
# SITE_DOMAIN = 'dkts.lce.vn'
SITE_DISPLAY_NAME = 'Đăng ký tuyển sinh LCE 2025'

# Cấu hình địa chỉ site (quan trọng cho link reset)
SITE_ID = 1

# Cấu hình thời gian hết hạn token (mặc định là 3 ngày)
PASSWORD_RESET_TIMEOUT = 259200  # 3 ngày tính bằng giây

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'bantuyensinh.lce@gmail.com' 
# EMAIL_HOST_PASSWORD = 'c10.12345@'
EMAIL_HOST_PASSWORD = 'iyrsaemnjifiloct'

DEFAULT_FROM_EMAIL = "bantuyensinh.lce@gmail.com" 

MESSAGE_TAGS = {
    messages.SUCCESS: 'success',
    messages.ERROR: 'error',
}

# CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
# # CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'django-db'  # Sử dụng database để lưu kết quả
# CELERY_TASK_TRACK_STARTED = True
# CELERYD_CONCURRENCY = 4
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'

# # Sử dụng eventlet cho Windows
# CELERY_WORKER_POOL = 'eventlet'
# CELERY_WORKER_CONCURRENCY = 10

# INSTALLED_APPS += [
#     'django_celery_results',
#     # 'django_celery_beat',
# ]

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake',
#     }
# }

